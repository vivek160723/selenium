####Customized Locators:###

1.css locators: Generally we dont use css selector
-Tag and id:use (#) in between
-Tag and class:use (.) in between
-Tag and Attribute: use ([]) and (=) in between
-Tag,class and Attribute

2.Xpath: is is basically the address of the element/it ia defined as XML path(//tagname[@attribute='value'])
-two types absolute(full xpath) and relative=//input[name="e-mail]
- it is used to find the position of any element through html dome structure
? Difference between absolute and relative XPATH
we use prefer to relative xpath  bcz change in the position of the element the relative path remain same
##DOM-document object model###


3.XPATH--AND , OR(used when the element values are dynamic)---19/12/24

4.XPATH-- with Text()----driver.find_Element(By.XPATH,"m")
5.XPATH---with contains()----driver.find_Element(By.XPATH,"//a[contains(text()'pricing')]")
                         ----driver.find_Element(By.XPATH,"//a[contains(@id,'pricing')]")
6.XPATH---with starts-with()----driver.find_Element(By.XPATH,"//a[starts-with(text(),'pricing')]")
                            ----driver.find_Element(By.XPATH,"//a[starts-with(@name,'value')]")


###----XPATH axes-----### 19/12/24

XPath axes are used to navigate through elements and attributes in
an XML document relative to the current node.
They provide a way to select nodes based on
their relationship to other nodes in the document tree.

###-----Relative  locators-----####--20 dec 2024
Near
Above/below
ToLeftOf/ToRightOf
WithtagName
Near and WITHTAGName

############################### Driver commands ############################ 23-dec-2024

1.Application commands:---applicable on driver only

These commands are used to interact with the browser through the WebDriver.
	•	get(url):
Loads the specified URL in the browser.
Purpose: Navigate to a web page.
	•	getTitle():
Returns the title of the current web page as a string.
Purpose: Verify the title of the page.
	•	getCurrentUrl():
Returns the current URL of the web page as a string.
Purpose: Ensure the correct page is loaded.
	•	getPageSource():
Fetches the HTML source code of the current page.
Purpose: Verify the structure or content of the page source.

2.Conditional Commands:---

These commands are used to verify the properties or states of web elements.
	•	isDisplayed():
Checks whether a web element is visible on the webpage.
Purpose: Validate if an element (e.g., button, image) is shown to the user.
	•	isEnabled():
Verifies if a web element is enabled for interaction.
Purpose: Ensure that buttons or input fields are active.
	•	isSelected():
Confirms if a web element, such as a checkbox or radio button, is selected.
Purpose: Verify user selections or default settings.

3.Browser commands---

>close()
>quit()

4.Navigational commands---

>back()
>forward()
>refresh()

Difference between find_element and find_elements

####---------------------Wait command 26-dec-24-----------------------###############

Waits in Selenium

Selenium provides three main types of waits to handle synchronization between the script and dynamic web elements:

1. Implicit Wait
	•	A global wait applied to all elements in the WebDriver session.
	•	Waits for a specified duration for elements to appear before throwing an exception.
	•	Suitable for simple, static applications.

2. Explicit Wait
	•	Waits for specific conditions (e.g., visibility, clickability) of specific elements.
	•	Applied to individual elements as needed.
	•	Ideal for handling dynamic elements or conditional scenarios.

3. Fluent Wait
	•	An advanced version of Explicit Wait with custom polling intervals.
	•	Allows ignoring specific exceptions during the wait.
	•	Best for highly dynamic applications requiring frequent checks.

Comparison
	•	Implicit Wait: Global, straightforward but less flexible.
	•	Explicit Wait: Specific and condition-based, more flexible.
	•	Fluent Wait: Customizable, suitable for complex scenarios.

#####-------------Drop down----------############### 26-dec-2024

##############-------27-dec-2024----------#####################
Here’s a quick overview of Alerts, Date Pickers, and Frames in Selenium:

1. Alerts in Selenium

Alerts are pop-ups or dialog boxes that interact with the user, and Selenium provides methods to handle them.

Types of Alerts:
	1.	Simple Alert: Displays a message with an “OK” button.
	2.	Confirmation Alert: Displays a message with “OK” and “Cancel” buttons.
	3.	Prompt Alert: Displays a message with a text box for user input and “OK” and “Cancel” buttons.

Handling Alerts in Selenium:
	•	Switch to the alert using driver.switchTo().alert().
	•	Perform operations like accept, dismiss, or get text:

Alert alert = driver.switchTo().alert();
alert.accept(); // Click OK
alert.dismiss(); // Click Cancel
String alertText = alert.getText(); // Get alert message
alert.sendKeys("Input Text"); // Send input (for Prompt Alert)

2. Date Pickers in Selenium

Date pickers are UI components for selecting dates.

Types of Date Pickers:
	1.	Text Input Date Picker: Requires entering a date in a specific format.
	2.	UI-based Calendar Date Picker: Requires interacting with a calendar widget.

Handling Date Pickers:
	1.	Text Input:
	•	Clear the field and input the desired date:

WebElement dateField = driver.findElement(By.id("dateInput"));
dateField.clear();
dateField.sendKeys("2024-12-27"); // Input date in required format


	2.	UI-based Calendar:
	•	Click on the calendar field, navigate through the month/year, and select the date:

driver.findElement(By.id("calendarButton")).click(); // Open the calendar
driver.findElement(By.xpath("//td[text()='27']")).click(); // Select the date

3. Frames in Selenium

Frames are HTML documents embedded inside another HTML document. Selenium provides methods to switch between frames.

Types of Frames:
	1.	iFrame: Inline frames embedded in the main HTML.
	2.	Frame by Name or ID: Frames with a specific name or id.

Handling Frames in Selenium:
	1.	Switch to a Frame:
	•	By Index:

driver.switchTo().frame(0); // Switch to the first frame


	•	By Name/ID:

driver.switchTo().frame("frameName");


	•	By WebElement:

WebElement frameElement = driver.findElement(By.tagName("iframe"));
driver.switchTo().frame(frameElement);


	2.	Perform Actions:
	•	Once inside the frame, interact with elements normally.
	3.	Switch Back:
	•	Switch back to the main document:

driver.switchTo().defaultContent();

Common Challenges
	•	Alerts: Unhandled alerts can block test execution.
	•	Date Pickers: Some custom calendars require dynamic element handling.
	•	Frames: Ensure you are in the correct frame when interacting with elements.

Let me know if you’d like code examples or further explanations on any specific concept!

######----Broken Links----######

